geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
}
pl
}
hmohiv <-read.table("http://bit.ly/2bVcHto", sep=",", header = TRUE)
km = kaplanMeier(survivalTime = "time", statusVariable = "censor", status = 1,
factors = "drug", quartilesOfSurvivalTimes = TRUE, data = hmohiv)
plot.km(km)
library(compSurv)
library(compSurv)
km = kaplanMeier(survivalTime = "time", statusVariable = "censor", status = 1,
factors = "drug", quartilesOfSurvivalTimes = TRUE, data = hmohiv)
plot.km(km)
#' Kaplan-Meier Curves
#'
#' Creates interactive Kaplan-Meier curves
#'
#' @name plot.km
#' @aliases plot.km
#' @method plot km
#' @param s a \code{kaplanMeier} object
#' @param CI add confidence interval
#' @param CItype confidence interval type \code{ribbon} or \code{line}
#' @param alpha opacity for ribbon confidence interval type
#' @param plot.cens add censored cases to the curve
#' @param surv.col default curve colors
#' @param cens.col censored cases color
#' @param lty.est line type for curves
#' @param lty.ci line type for confidence interval
#' @param cens.shape censored cases shape
#' @param back.white bakcgorud color is white, if \code{TRUE}, otherwise grey
#' @param interactive creates interactive plot via plotly, if \code{TRUE}
#' @param xlab x-axis label
#' @param ylab y-axis label
#' @param main main title
#' @param \dots additional arguments
#'
#' @return Kaplan-Meier curves
#'
#' @author Selcuk Korkmaz, \email{selcukorkmaz@gmail.com}
#'
#' @examples
#' hmohiv <-read.table("http://bit.ly/2bVcHto", sep=",", header = TRUE)
#' km = kaplanMeier(survivalTime = "time", statusVariable = "censor", status = 1,
#' factors = "drug", quartilesOfSurvivalTimes = TRUE, data = hmohiv)
#' plot(km)
#'
#' @export
#' @importFrom ggplot2 xlab ylab aes geom_point geom_ribbon geom_step ggplot ggtitle guide_legend guides scale_colour_discrete scale_colour_manual scale_linetype_manual theme_bw
#' @importFrom plotly ggplotly last_plot
#' @importFrom stats time
#'
plot <- function (s, CI = TRUE, CItype = "ribbon", alpha = 0.5, plot.cens = TRUE, surv.col = 'gg.def',
cens.col = 'black', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = T, interactive = FALSE, xlab = 'Time',
ylab = 'Survival', main = '',...) {
UseMethod("km")
}
plot.km <- function(s, CI = TRUE, CItype = "ribbon", alpha = 0.5, plot.cens = TRUE, surv.col = 'gg.def',
cens.col = 'black', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = T, interactive = FALSE, xlab = 'Time',
ylab = 'Survival', main = '', ...){
if(CI){CI = "T"}
if(plot.cens){plot.cens = "T"}
low = NULL
up = NULL
group = NULL
s2 = s$curveResults
strata = length(s2$strata)
#utils::globalVariables("cens","surv","up","low")
#strata <- ifelse(is.null(s$strata) == T, 1, length(s2$strata))
stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
pl <- if(strata == 0) {
dat <- data.frame(time = c(0, s2$time),
surv = c(1, s2$surv),
up = c(1, s2$upper),
low = c(1, s2$lower),
cens = c(0, s2$n.censor))
dat.cens <- subset(dat, cens != 0)
col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
pl <- ggplot(dat, aes(x = time, y = surv)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(col = col, lty = lty.est)
pl <- if(CI == T | CI == 'def') {
pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
geom_step(aes(y = low), color = col, lty = lty.ci)
} else (pl)
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
} else {
groups <- factor(unlist(strsplit(names(s2$strata), "="))[seq(2, 2*strata, by = 2)])
gr.name <-  unlist(strsplit(names(s2$strata), '='))[1]
gr.df <- vector('list', strata)
ind <- vector('list', strata)
n.ind <- c(0,n); n.ind <- cumsum(n.ind)
for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
for(i in 1:strata){
gr.df[[i]] <- data.frame(
time = c(0, s2$time[ ind[[i]] ]),
surv = c(1, s2$surv[ ind[[i]] ]),
up = c(1, s2$upper[ ind[[i]] ]),
low = c(1, s2$lower[ ind[[i]] ]),
cens = c(0, s2$n.censor[ ind[[i]] ]),
group = rep(groups[i], n[i] + 1))
}
dat <- do.call(rbind, gr.df)
dat.cens <- subset(dat, cens != 0)
pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(aes(col = group, lty = group))
col <- if(length(surv.col == 1)){
scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
} else{
scale_colour_manual(name = gr.name, values = surv.col)
}
pl <- if(surv.col[1] != 'gg.def'){
pl + col
} else {pl + scale_colour_discrete(name = gr.name)}
line <- if(length(lty.est) == 1){
scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
} else {scale_linetype_manual(name = gr.name, values = lty.est)}
pl <- pl + line
pl <- if(CI == T) {
if(length(surv.col) > 1 && length(lty.est) > 1){
stop('Either surv.col or lty.est should be of length 1 in order
to plot 95% CI with multiple strata')
}else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
}
pl
}
plot.km(km)
library(compSurv)
?cr
hmohiv <-read.table("http://bit.ly/2bVcHto", sep=",", header = TRUE)
cox = cr(survivalTime = "time", categoricalInput = "drug",
continuousInput = "age", statusVariable = "censor", status = 1,
addInteractions = TRUE, customInteractions =TRUE,
selectCustomInteractionTerms = "age*drug", timeDependetCovariate = TRUE,
selectTimeDependentCovariate = "age", timeDependentVariableTransformation = "log",
data = hmohiv)
hmohiv <-read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/", sep=",", header = TRUE)
hmohiv <-read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/hmohiv.txt", sep=",", header = TRUE)
cox = cr(survivalTime = "time", categoricalInput = "drug",
continuousInput = "age", statusVariable = "censor", status = 1,
addInteractions = TRUE, customInteractions =TRUE,
selectCustomInteractionTerms = "age*drug", timeDependetCovariate = TRUE,
selectTimeDependentCovariate = "age", timeDependentVariableTransformation = "log",
data = hmohiv)
hmohiv <-read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/hmohiv.txt", sep=",", header = TRUE)
head(hmohiv)
hmohiv <-read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/hmohiv.txt", sep="\t", header = TRUE)
head(hmohiv)
cox = cr(survivalTime = "time", categoricalInput = "drug",
continuousInput = "age", statusVariable = "censor", status = 1,
addInteractions = TRUE, customInteractions =TRUE,
selectCustomInteractionTerms = "age*drug", timeDependetCovariate = TRUE,
selectTimeDependentCovariate = "age", timeDependentVariableTransformation = "log",
data = hmohiv)
cox
plot(cox)
plot(cox)
library(compSurv)
hmohiv <-read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/hmohiv.txt", sep="\t", header = TRUE)
head(hmohiv)
cox = cr(survivalTime = "time", categoricalInput = "drug",
continuousInput = "age", statusVariable = "censor", status = 1,
addInteractions = TRUE, customInteractions =TRUE,
selectCustomInteractionTerms = "age*drug", timeDependetCovariate = TRUE,
selectTimeDependentCovariate = "age", timeDependentVariableTransformation = "log",
data = hmohiv)
plot(cox)
plot(cox,back.white = F)
plot(cox,back.white = T)
install.packages(c("shiny", "maps", "mapproj", "quantmod"))
library(Rcmdr)
17810+8998
17810+8998
?mcp
library(car)
data("iris")
head(iris)
randomForest::randomForest()
?randomForest::randomForest()
?randomForest::randomForest
library(car)
data(iris)
head(iris)
table(iris[,5])
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris)
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width | Species, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris, legend.pos = "left")
library(car)
data(iris)
head(iris)
table(iris[,5])
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris)
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width | Species, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris, legend.pos = "left")
library(NbClust)
iris2 = iris[,1:4]
d = dist(iris2, method = "euclidean", diag=FALSE)
# method = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski")
silhK = NbClust(iris2, diss = d, distance = NULL, min.nc = 2, max.nc = 12, index = "silhouette", method = "ward.D")
# method = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median", "centroid", "kmeans")
# index = c( "kl", "ch", "hartigan", "ccc", "scott", "marriot", "trcovw", "tracew", "friedman", "rubin", "cindex", "db", "silhouette", "duda", "pseudot2", "beale", "ratkowsky", "ball", "ptbiserial", "gap", "frey", "mcclain", "gamma", "gplus", "tau", "dunn", "hubert", "sdindex", "dindex", "sdbw", "all", "alllong")
silhK
bestK = NbClust(iris2, diss=d, distance = NULL,  min.nc=2, max.nc=12, index = "all", method = "ward.D")
bestK$Best.nc
bestK$Best.partition
install.packages("shiny")
library("shiny")
runExample("01_hello")
# Uygulamada ui.R tarafında kullanılacak olan paketlerin çağrılması
library(shiny)
# Arayüz için uygun bir temanın seçilmesi (fluidPage, pageWithSidebar vs.)
shinyUI(fluidPage(
# Uygulamanın başlığı
titlePanel("Hello Shiny!"),
# Uygulamanın sidebar panelinin oluşturulması
sidebarLayout( # Sidebar tasarımının belirlenmesi
sidebarPanel( # Sidebar panelinin oluşturulması
# Slider girdisinin oluşturulması
sliderInput(inputId = "bins", # server tarafında değerlere erişmek için kullanılan id
label = "Number of bins:", # arayüzde slider için gözükecek olan etiket
min = 1, # slider için minimum değer
max = 50, # slider için maximum değer
value = 30 # varsayılan olarak gözükmesi istenen değer
)
),
# Uygulamanın ana panelinin oluşturulması
mainPanel(
plotOutput("distPlot") # grafiğin ekrana basılması
)
)
))
# Uygulamada ui.R tarafında kullanılacak olan paketlerin çağrılması
library(shiny)
# Arayüz için uygun bir temanın seçilmesi (fluidPage, pageWithSidebar vs.)
shinyUI(fluidPage(
# Uygulamanın başlığı
titlePanel("Hello Shiny!"),
# Uygulamanın sidebar panelinin oluşturulması
sidebarLayout( # Sidebar tasarımının belirlenmesi
sidebarPanel( # Sidebar panelinin oluşturulması
# Slider girdisinin oluşturulması
sliderInput(inputId = "bins", # server tarafında değerlere erişmek için kullanılan id
label = "Number of bins:", # arayüzde slider için gözükecek olan etiket
min = 1, # slider için minimum değer
max = 50, # slider için maximum değer
value = 30 # varsayılan olarak gözükmesi istenen değer
)
),
# Uygulamanın ana panelinin oluşturulması
mainPanel(
plotOutput("distPlot") # grafiğin ekrana basılması
)
)
))
# Uygulamada ui.R tarafında kullanılacak olan paketlerin çağrılması
library(shiny)
# Arayüz için uygun bir temanın seçilmesi (fluidPage, pageWithSidebar vs.)
shinyUI(fluidPage(
# Uygulamanın başlığı
titlePanel("Hello Shiny!"),
# Uygulamanın sidebar panelinin oluşturulması
sidebarLayout( # Sidebar tasarımının belirlenmesi
sidebarPanel( # Sidebar panelinin oluşturulması
# Slider girdisinin oluşturulması
sliderInput(inputId = "bins", # server tarafında değerlere erişmek için kullanılan id
label = "Number of bins:", # arayüzde slider için gözükecek olan etiket
min = 1, # slider için minimum değer
max = 50, # slider için maximum değer
value = 30 # varsayılan olarak gözükmesi istenen değer
)
),
# Uygulamanın ana panelinin oluşturulması
mainPanel(
plotOutput("distPlot") # grafiğin ekrana basılması
)
)
))
# Uygulamada ui.R tarafında kullanılacak olan paketlerin çağrılması
library(shiny)
# Arayüz için uygun bir temanın seçilmesi (fluidPage, pageWithSidebar vs.)
shinyUI(fluidPage(
# Uygulamanın başlığı
titlePanel("Hello Shiny!"),
# Uygulamanın sidebar panelinin oluşturulması
sidebarLayout( # Sidebar tasarımının belirlenmesi
sidebarPanel( # Sidebar panelinin oluşturulması
# Slider girdisinin oluşturulması
sliderInput(inputId = "bins", # server tarafında değerlere erişmek için kullanılan id
label = "Number of bins:", # arayüzde slider için gözükecek olan etiket
min = 1, # slider için minimum değer
max = 50, # slider için maximum değer
value = 30 # varsayılan olarak gözükmesi istenen değer
)
),
# Uygulamanın ana panelinin oluşturulması
mainPanel(
plotOutput("distPlot") # grafiğin ekrana basılması
)
)
))
# Uygulamada ui.R tarafında kullanılacak olan paketlerin çağrılması
library(shiny)
# Arayüz için uygun bir temanın seçilmesi (fluidPage, pageWithSidebar vs.)
shinyUI(fluidPage(
# Uygulamanın başlığı
titlePanel("Hello Shiny!"),
# Uygulamanın sidebar panelinin oluşturulması
sidebarLayout( # Sidebar tasarımının belirlenmesi
sidebarPanel( # Sidebar panelinin oluşturulması
# Slider girdisinin oluşturulması
sliderInput(inputId = "bins", # server tarafında değerlere erişmek için kullanılan id
label = "Number of bins:", # arayüzde slider için gözükecek olan etiket
min = 1, # slider için minimum değer
max = 50, # slider için maximum değer
value = 30 # varsayılan olarak gözükmesi istenen değer
)
),
# Uygulamanın ana panelinin oluşturulması
mainPanel(
plotOutput("distPlot") # grafiğin ekrana basılması
)
)
))
# Uygulamada server.R tarafında kullanılacak olan paketlerin çağrılması
library(shiny)
# Server tarafının bir histogram çizilecek şekilde tanımlanması
shinyServer(function(input, output) {
# Histogramı oluşturan kodlar burada yer almaktadır.
# renderPlot fonksiyonu iki ana amacı yerine getirmektedir:
#
#  1) Bu fonksiyon "reaktiftir" ve girdi değiştiği anda kodlar otomatik olarak yeniden çalıştırılacaktır
#  2) Çıktı olarak bir grafik (plot) verilecektir.
output$distPlot <- renderPlot({
x    <- faithful[, 2]  # Old Faithful Geyser verisin 2. sütunu
binNumber <- seq(min(x), max(x), length.out = input$bins + 1) # histogramın bar sayısının belirlenmesi
# belirlenen bar sayısı ile histogramın çizilmesi
hist(x, breaks = binNumber, col = 'darkgray', border = 'white')
})
})
library(car)
data(iris)
data(iris)
head(iris)
table(iris[,5])
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris)
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width | Species, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris, legend.pos = "left")
```
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width | Species, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris, legend.pos = "left")
```
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris)
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width | Species, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris, legend.pos = "left")
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris)
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width | Species, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris, legend.pos = "left")
scatterplotMatrix(~Petal.Length + Petal.Width + Sepal.Length + Sepal.Width | Species, reg.line=FALSE, smooth=FALSE, spread=FALSE, span=0.5, id.n=0, diagonal = 'density', data=iris, legend.pos = "left")
library(NbClust)
iris2 = iris[,1:4]
head(iris2)
d = dist(iris2, method = "euclidean", diag=FALSE)
d
dim(d)
class(d)
class(as.matrix(d))
dim(as.matrix(d))
?NbClust
silhK = NbClust(iris2, diss = d, distance = NULL,  min.nc = 2, max.nc = 12, index = "silhouette", method = "ward.D")
silhK
bestK = NbClust(iris2, diss=d, distance = NULL,  min.nc=2, max.nc=12, index = "all", method = "ward.D")
silhK = NbClust(iris2, diss = d, distance = NULL,  min.nc = 2, max.nc = 12, index = "silhouette", method = "complete")
bestK = NbClust(iris2, diss=d, distance = NULL,  min.nc=2, max.nc=12, index = "all", method = "complete")
bestK = NbClust(iris2, diss=d, distance = NULL,  min.nc=2, max.nc=12, index = "all", method = "kmeans")
bestK = NbClust(iris2, diss=d, distance = NULL,  min.nc=2, max.nc=12, index = "all", method = "ward.D")
library(clValid)
head(iris2)
rownames(iris2) = seq(1:150)
head(iris2)
?clValid
library(clValid)
modelgec = clValid(iris2, 3, clMethods = c("hierarchical", "kmeans", "model"), validation = "internal")
summary(modelgec)
?hclust
fitBH = hclust(d, method = "average")
fitBH
plot(fitBH)
plot(fitBH)
groups = cutree(fitBH, k=3)
rect.hclust(fitBH, k=3, border="red")
groups
iris[,5]
table(groups, iris[,5])
set.seed(1234)
fitKO = kmeans(iris2, 3)
fitKO
table(fitKO$cluster, iris[,5])
library(mclust)
fitMT <- Mclust(iris2)
summary(fitMT)
plot(fitMT)
library(caret)
golub = read.table(file = "data/Leukemia.txt", header = T)
setwd("~/Dropbox/kurs materyali/Machine Learning/")
golub = read.table(file = "data/Leukemia.txt", header = T)
dim(golub)
golubcl = golub[,1]
golubcl
golubdat = golub[,1:500]
?createDataPartition
set.seed(12345)
golubdat = scale(golubdat, center=TRUE, scale=TRUE)
inTrain = createDataPartition(golubcl, p = 0.75, list = FALSE)
inTrain
dim(inTrain)
72*0.75
traindat = golubdat[inTrain,]
-inTrain
testdat = golubdat[-inTrain,]
golubcl
inTrain
traincl = as.factor(golubcl[inTrain])
traincl
testcl = as.factor(golubcl[-inTrain])
testcl
dim(traindat)
dim(testdat)
kor = cor(traindat)
?findCorrelation
yuksekkor = findCorrelation(kor, 0.50)
yuksekkor
length(yuksekkor)
traindatfl = traindat[,-yuksekkor]
testdatfl = testdat[,-yuksekkor]
dim(traindatfl)
dim(testdatfl)
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
dim(traindatfl)
traincl
cart = train(traindatfl, traincl, method = "rpart", tuneLength = 10, trControl = ctrl, metric = "Accuracy")
cart
rf = train(traindatfl, traincl, method = "rf", tuneLength = 10, trControl = ctrl, metric = "Accuracy")
rf
svm = train(traindatfl, traincl, method = "svmRadial", tuneLength = 10, trControl = ctrl, metric = "Accuracy")
svm
dim(testdatfl)
cartpred = predict.train(cart, testdatfl)
cartpred
testcl
table(cartpred, testcl)
confusionMatrix(table(cartpred, testcl))
rfpred = predict.train(rf, testdatfl)
rfpred
confusionMatrix(table(rfpred, testcl))
svmpred = predict.train(svm, testdatfl)
svmpred
confusionMatrix(table(svmpred, testcl))
plot(varImp(svm), top = 20)
plot(varImp(rf), top = 20)
plot(varImp(cart), top = 20)
library("shiny")
```
library("shiny")
runExample("01_hello")
runExample("01_hello")
library(shiny)
runApp("~/Dropbox/kurs materyali/Shiny/shiny-examples/000-example/")
runApp("~/Dropbox/kurs materyali/Shiny/shiny-examples/000-example/")
?em
em("em() creates italicized (i.e, emphasized) text."),
em("em() creates italicized (i.e, emphasized) text.")
em("sd")
runApp('~/Dropbox/kurs materyali/Shiny/shiny-examples/000-example')
runApp('~/Dropbox/kurs materyali/Shiny/shiny-examples/000-example')
runApp('~/Dropbox/kurs materyali/Shiny/shiny-examples/000-example')
runApp('~/Dropbox/kurs materyali/Shiny/shiny-examples/000-example')
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/")
runApp()
packagesML = c("car", "NbClust", "clValid", "mclust", "caret", "randomForest", "kernlab")
packagesShiny = c("shiny", "maps", "mapproj", "quantmod")
packagesShiny = c("shiny", "maps", "mapproj", "quantmod")
source("https://bioconductor.org/biocLite.R")
biocLite("annaffy")
runApp('~/Dropbox/kurs materyali/Shiny/shiny-examples/000-example')
