geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
plot.km(km)
library(ggplot2)
plot.km(km)
library(ggplot2)
plot.km <- function(s, CI = TRUE, CItype = "ribbon", alpha = 0.5, plot.cens = TRUE, surv.col = 'gg.def',
cens.col = 'black', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = T, interactive = FALSE, xlab = 'Time',
ylab = 'Survival', main = '', ...){
if(CI){CI = "T"}
if(plot.cens){plot.cens = "T"}
low = NULL
up = NULL
group = NULL
s2 = s$curveResults
strata = length(s2$strata)
#utils::globalVariables("cens","surv","up","low")
#strata <- ifelse(is.null(s$strata) == T, 1, length(s2$strata))
stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
pl <- if(strata == 0) {
dat <- data.frame(time = c(0, s2$time),
surv = c(1, s2$surv),
up = c(1, s2$upper),
low = c(1, s2$lower),
cens = c(0, s2$n.censor))
dat.cens <- subset(dat, cens != 0)
col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
pl <- ggplot(dat, aes(x = time, y = surv)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(col = col, lty = lty.est)
pl <- if(CI == T | CI == 'def') {
pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
geom_step(aes(y = low), color = col, lty = lty.ci)
} else (pl)
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
} else {
groups <- factor(unlist(strsplit(names(s2$strata), "="))[seq(2, 2*strata, by = 2)])
gr.name <-  unlist(strsplit(names(s2$strata), '='))[1]
gr.df <- vector('list', strata)
ind <- vector('list', strata)
n.ind <- c(0,n); n.ind <- cumsum(n.ind)
for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
for(i in 1:strata){
gr.df[[i]] <- data.frame(
time = c(0, s2$time[ ind[[i]] ]),
surv = c(1, s2$surv[ ind[[i]] ]),
up = c(1, s2$upper[ ind[[i]] ]),
low = c(1, s2$lower[ ind[[i]] ]),
cens = c(0, s2$n.censor[ ind[[i]] ]),
group = rep(groups[i], n[i] + 1))
}
dat <- do.call(rbind, gr.df)
dat.cens <- subset(dat, cens != 0)
pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(aes(col = group, lty = group))
col <- if(length(surv.col == 1)){
scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
} else{
scale_colour_manual(name = gr.name, values = surv.col)
}
pl <- if(surv.col[1] != 'gg.def'){
pl + col
} else {pl + scale_colour_discrete(name = gr.name)}
line <- if(length(lty.est) == 1){
scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
} else {scale_linetype_manual(name = gr.name, values = lty.est)}
pl <- pl + line
pl <- if(CI == T) {
if(length(surv.col) > 1 && length(lty.est) > 1){
stop('Either surv.col or lty.est should be of length 1 in order
to plot 95% CI with multiple strata')
}else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
}
pl
}
hmohiv <-read.table("http://bit.ly/2bVcHto", sep=",", header = TRUE)
km = kaplanMeier(survivalTime = "time", statusVariable = "censor", status = 1,
factors = "drug", quartilesOfSurvivalTimes = TRUE, data = hmohiv)
plot.km(km)
library(compSurv)
library(compSurv)
km = kaplanMeier(survivalTime = "time", statusVariable = "censor", status = 1,
factors = "drug", quartilesOfSurvivalTimes = TRUE, data = hmohiv)
plot.km(km)
#' Kaplan-Meier Curves
#'
#' Creates interactive Kaplan-Meier curves
#'
#' @name plot.km
#' @aliases plot.km
#' @method plot km
#' @param s a \code{kaplanMeier} object
#' @param CI add confidence interval
#' @param CItype confidence interval type \code{ribbon} or \code{line}
#' @param alpha opacity for ribbon confidence interval type
#' @param plot.cens add censored cases to the curve
#' @param surv.col default curve colors
#' @param cens.col censored cases color
#' @param lty.est line type for curves
#' @param lty.ci line type for confidence interval
#' @param cens.shape censored cases shape
#' @param back.white bakcgorud color is white, if \code{TRUE}, otherwise grey
#' @param interactive creates interactive plot via plotly, if \code{TRUE}
#' @param xlab x-axis label
#' @param ylab y-axis label
#' @param main main title
#' @param \dots additional arguments
#'
#' @return Kaplan-Meier curves
#'
#' @author Selcuk Korkmaz, \email{selcukorkmaz@gmail.com}
#'
#' @examples
#' hmohiv <-read.table("http://bit.ly/2bVcHto", sep=",", header = TRUE)
#' km = kaplanMeier(survivalTime = "time", statusVariable = "censor", status = 1,
#' factors = "drug", quartilesOfSurvivalTimes = TRUE, data = hmohiv)
#' plot(km)
#'
#' @export
#' @importFrom ggplot2 xlab ylab aes geom_point geom_ribbon geom_step ggplot ggtitle guide_legend guides scale_colour_discrete scale_colour_manual scale_linetype_manual theme_bw
#' @importFrom plotly ggplotly last_plot
#' @importFrom stats time
#'
plot <- function (s, CI = TRUE, CItype = "ribbon", alpha = 0.5, plot.cens = TRUE, surv.col = 'gg.def',
cens.col = 'black', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = T, interactive = FALSE, xlab = 'Time',
ylab = 'Survival', main = '',...) {
UseMethod("km")
}
plot.km <- function(s, CI = TRUE, CItype = "ribbon", alpha = 0.5, plot.cens = TRUE, surv.col = 'gg.def',
cens.col = 'black', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = T, interactive = FALSE, xlab = 'Time',
ylab = 'Survival', main = '', ...){
if(CI){CI = "T"}
if(plot.cens){plot.cens = "T"}
low = NULL
up = NULL
group = NULL
s2 = s$curveResults
strata = length(s2$strata)
#utils::globalVariables("cens","surv","up","low")
#strata <- ifelse(is.null(s$strata) == T, 1, length(s2$strata))
stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
pl <- if(strata == 0) {
dat <- data.frame(time = c(0, s2$time),
surv = c(1, s2$surv),
up = c(1, s2$upper),
low = c(1, s2$lower),
cens = c(0, s2$n.censor))
dat.cens <- subset(dat, cens != 0)
col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
pl <- ggplot(dat, aes(x = time, y = surv)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(col = col, lty = lty.est)
pl <- if(CI == T | CI == 'def') {
pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
geom_step(aes(y = low), color = col, lty = lty.ci)
} else (pl)
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
} else {
groups <- factor(unlist(strsplit(names(s2$strata), "="))[seq(2, 2*strata, by = 2)])
gr.name <-  unlist(strsplit(names(s2$strata), '='))[1]
gr.df <- vector('list', strata)
ind <- vector('list', strata)
n.ind <- c(0,n); n.ind <- cumsum(n.ind)
for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
for(i in 1:strata){
gr.df[[i]] <- data.frame(
time = c(0, s2$time[ ind[[i]] ]),
surv = c(1, s2$surv[ ind[[i]] ]),
up = c(1, s2$upper[ ind[[i]] ]),
low = c(1, s2$lower[ ind[[i]] ]),
cens = c(0, s2$n.censor[ ind[[i]] ]),
group = rep(groups[i], n[i] + 1))
}
dat <- do.call(rbind, gr.df)
dat.cens <- subset(dat, cens != 0)
pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(aes(col = group, lty = group))
col <- if(length(surv.col == 1)){
scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
} else{
scale_colour_manual(name = gr.name, values = surv.col)
}
pl <- if(surv.col[1] != 'gg.def'){
pl + col
} else {pl + scale_colour_discrete(name = gr.name)}
line <- if(length(lty.est) == 1){
scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
} else {scale_linetype_manual(name = gr.name, values = lty.est)}
pl <- pl + line
pl <- if(CI == T) {
if(length(surv.col) > 1 && length(lty.est) > 1){
stop('Either surv.col or lty.est should be of length 1 in order
to plot 95% CI with multiple strata')
}else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
}
pl
}
plot.km(km)
library(compSurv)
?cr
hmohiv <-read.table("http://bit.ly/2bVcHto", sep=",", header = TRUE)
cox = cr(survivalTime = "time", categoricalInput = "drug",
continuousInput = "age", statusVariable = "censor", status = 1,
addInteractions = TRUE, customInteractions =TRUE,
selectCustomInteractionTerms = "age*drug", timeDependetCovariate = TRUE,
selectTimeDependentCovariate = "age", timeDependentVariableTransformation = "log",
data = hmohiv)
hmohiv <-read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/", sep=",", header = TRUE)
hmohiv <-read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/hmohiv.txt", sep=",", header = TRUE)
cox = cr(survivalTime = "time", categoricalInput = "drug",
continuousInput = "age", statusVariable = "censor", status = 1,
addInteractions = TRUE, customInteractions =TRUE,
selectCustomInteractionTerms = "age*drug", timeDependetCovariate = TRUE,
selectTimeDependentCovariate = "age", timeDependentVariableTransformation = "log",
data = hmohiv)
hmohiv <-read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/hmohiv.txt", sep=",", header = TRUE)
head(hmohiv)
hmohiv <-read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/hmohiv.txt", sep="\t", header = TRUE)
head(hmohiv)
cox = cr(survivalTime = "time", categoricalInput = "drug",
continuousInput = "age", statusVariable = "censor", status = 1,
addInteractions = TRUE, customInteractions =TRUE,
selectCustomInteractionTerms = "age*drug", timeDependetCovariate = TRUE,
selectTimeDependentCovariate = "age", timeDependentVariableTransformation = "log",
data = hmohiv)
cox
plot(cox)
plot(cox)
library(compSurv)
hmohiv <-read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/hmohiv.txt", sep="\t", header = TRUE)
head(hmohiv)
cox = cr(survivalTime = "time", categoricalInput = "drug",
continuousInput = "age", statusVariable = "censor", status = 1,
addInteractions = TRUE, customInteractions =TRUE,
selectCustomInteractionTerms = "age*drug", timeDependetCovariate = TRUE,
selectTimeDependentCovariate = "age", timeDependentVariableTransformation = "log",
data = hmohiv)
plot(cox)
plot(cox,back.white = F)
plot(cox,back.white = T)
install.packages(c("shiny", "maps", "mapproj", "quantmod"))
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/")
data = read.table(file = "hmohiv.txt", header = T, sep = "\t")
survivalTime = "time"
statusVar = "censor"
categoricalVariables = c("treatment", "cellType", "priorTherapy")
continiousVariables = c("karnofskyScore", "monthsFromDiagnosis", "age")
newData = cbind(data.frame(lapply(data[, categoricalVariables], as.factor)),
data.frame(lapply(data[, continiousVariables], as.numeric)), time = as.numeric(data[,survivalTime]),
status = as.numeric(data[, statusVar]))
categoricalVariables
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/www/data/")
data = read.table(file = "lungCancer.txt", header = T, sep = "\t")
head(data)
survivalTime = "time"
statusVar = "censor"
categoricalVariables = c("treatment", "cellType", "priorTherapy")
continiousVariables = c("karnofskyScore", "monthsFromDiagnosis", "age")
newData = cbind(data.frame(lapply(data[, categoricalVariables], as.factor)),
data.frame(lapply(data[, continiousVariables], as.numeric)), time = as.numeric(data[,survivalTime]),
status = as.numeric(data[, statusVar]))
statusVar = "status"
newData = cbind(data.frame(lapply(data[, categoricalVariables], as.factor)),
data.frame(lapply(data[, continiousVariables], as.numeric)), time = as.numeric(data[,survivalTime]),
status = as.numeric(data[, statusVar]))
predictors = paste(categoricalVariables,continiousVariables, sep = "+", collapse = "+")
formula = as.formula(paste(survivalTime, "~", predictors))
formula
mm = model.matrix(formula, data = newData)
head(mm)
newData = cbind(newData[,c(survivalTime, statusVar)], mm)
head(newData)
survivalTime = "time"
statusVar = "status"
categoricalVariables = c("treatment", "cellType", "priorTherapy")
continiousVariables = c("karnofskyScore", "monthsFromDiagnosis", "age")
newData = cbind(data.frame(lapply(data[, categoricalVariables], as.factor)),
data.frame(lapply(data[, continiousVariables], as.numeric)), time = as.numeric(data[,survivalTime]),
status = as.numeric(data[, statusVar]))
predictors = paste(categoricalVariables,continiousVariables, sep = "+", collapse = "+")
formula = as.formula(paste(survivalTime, "~", predictors))
mm = model.matrix(formula, data = newData)
colnames(newData)
mm
newData = cbind(newData[,c(survivalTime, statusVar)], mm)
head(newData)
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/www/data/")
data = read.table(file = "lungCancer.txt", header = T, sep = "\t")
survivalTime = "time"
statusVar = "status"
categoricalVariables = c("treatment", "cellType", "priorTherapy")
continiousVariables = c("karnofskyScore", "monthsFromDiagnosis", "age")
newData = cbind(data.frame(lapply(data[, categoricalVariables], as.factor)),
data.frame(lapply(data[, continiousVariables], as.numeric)), time = as.numeric(data[,survivalTime]),
status = as.numeric(data[, statusVar]))
predictors = paste(categoricalVariables,continiousVariables, sep = "+", collapse = "+")
formula = as.formula(paste(survivalTime, "~", predictors))
mm = model.matrix(formula, data = newData)
newData = cbind(newData[,c(survivalTime, statusVar)], mm)
head(newData)
colnames(newData)
indx = c(survivalTime, statusVar, "(Intercept)") %>% colnames(newData)
indx = c(survivalTime, statusVar, "(Intercept)") %in% colnames(newData)
indx
indx = colnames(newData) %in% c(survivalTime, statusVar, "(Intercept)")
indx
x = data.matrix(data[,-indx])
head(x)
x = data.matrix(newData[,-indx])
head(x)
!indx
x = data.matrix(newData[,!indx])
!indx
head(x)
x$trearment2
x[,1]
head(x)
x
predictors
mm
y = Surv(survivalTime, statusVar, data = newData)
library(survival)
y = Surv(survivalTime, statusVar, data = newData)
?Surv
y = Surv(survivalTime, statusVar)
y = Surv(newData[,survivalTime], newData[,statusVar])
y
fit <- cv.glmnet(x, y, family="cox", alpha=1)
library(glmnet)
fit <- cv.glmnet(x, y, family="cox", alpha=1)
coef(fit, s = cvfit$lambda.min)
coef(fit, s = fit$lambda.min)
data = read.table(file = "lungCancer.txt", header = T, sep = "\t")
survivalTime = "time"
statusVar = "status"
categoricalVariables = c("cellType", "priorTherapy")
continiousVariables = c("karnofskyScore", "monthsFromDiagnosis", "age", "treatment")
newData = cbind(data.frame(lapply(data[, categoricalVariables], as.factor)),
data.frame(lapply(data[, continiousVariables], as.numeric)), time = as.numeric(data[,survivalTime]),
status = as.numeric(data[, statusVar]))
predictors = paste(categoricalVariables,continiousVariables, sep = "+", collapse = "+")
formula = as.formula(paste(survivalTime, "~", predictors))
mm = model.matrix(formula, data = newData)
newData = cbind(newData[,c(survivalTime, statusVar)], mm)
indx = colnames(newData) %in% c(survivalTime, statusVar, "(Intercept)")
newData2 = newData[,3:10]
x = data.matrix(newData[,!indx])
y = Surv(newData[,survivalTime], newData[,statusVar])
fit <- cv.glmnet(x, y, family="cox", alpha=1)
coef(fit, s = fit$lambda.min)
survivalTime = "time"
statusVar = "status"
categoricalVariables = c("cellType", "priorTherapy")
continiousVariables = c("karnofskyScore", "monthsFromDiagnosis", "age", "treatment")
newData = cbind(data.frame(lapply(data[, categoricalVariables], as.factor)),
data.frame(lapply(data[, continiousVariables], as.numeric)), time = as.numeric(data[,survivalTime]),
status = as.numeric(data[, statusVar]))
predictors = paste(categoricalVariables,continiousVariables, sep = "+", collapse = "+")
formula = as.formula(paste(survivalTime, "~", predictors))
mm = model.matrix(formula, data = newData)
headm(mm)
head(mm)
data = read.table(file = "lungCancer.txt", header = T, sep = "\t")
survivalTime = "time"
statusVar = "status"
categoricalVariables = c("cellType", "priorTherapy")
continiousVariables = c("karnofskyScore", "monthsFromDiagnosis", "age", "treatment")
newData = cbind(data.frame(lapply(data[, categoricalVariables], as.factor)),
data.frame(lapply(data[, continiousVariables], as.numeric)), time = as.numeric(data[,survivalTime]),
status = as.numeric(data[, statusVar]))
predictors = paste(categoricalVariables,continiousVariables, sep = "+", collapse = "+")
formula = as.formula(paste(survivalTime, "~", predictors))
mm = model.matrix(formula, data = newData)
newData = cbind(newData[,c(survivalTime, statusVar)], mm)
indx = colnames(newData) %in% c(survivalTime, statusVar)
newData2 = newData[,3:10]
x = data.matrix(newData[,!indx])
y = Surv(newData[,survivalTime], newData[,statusVar])
fit <- cv.glmnet(x, y, family="cox", alpha=1)
coef(fit, s = fit$lambda.min)
library(glmnet)
'%ni%'<-Negate('%in%')
data(mtcars)
x<-model.matrix(mpg~.,data=mtcars)
x=x[,-1]
library(glmnet)
'%ni%'<-Negate('%in%')
data(mtcars)
x<-model.matrix(mpg~.,data=mtcars)
head(x)
mtcars$vs
x=x[,-1]
glmnet1<-cv.glmnet(x=x,y=mtcars$mpg,type.measure='mse',nfolds=5,alpha=.5)
c<-coef(glmnet1,s='lambda.min',exact=TRUE)
c
inds<-which(c!=0)
variables<-row.names(c)[inds]
variables<-variables[variables %ni% '(Intercept)']
variables
newData = cbind(data.frame(lapply(data[, categoricalVariables], as.factor)),
data.frame(lapply(data[, continiousVariables], as.numeric)), time = as.numeric(data[,survivalTime]),
status = as.numeric(data[, statusVar]))
predictors = paste(categoricalVariables,continiousVariables, sep = "+", collapse = "+")
formula = as.formula(paste(survivalTime, "~", predictors))
mm = model.matrix(formula, data = newData)
newData = cbind(newData[,c(survivalTime, statusVar)], mm)
indx = colnames(newData) %in% c(survivalTime, statusVar)
newData2 = newData[,3:10]
x = data.matrix(newData[,!indx])
y = Surv(newData[,survivalTime], newData[,statusVar])
fit <- cv.glmnet(x, y, family="cox", alpha=1)
coef(fit, s = fit$lambda.min)
head(data)
x = data.matrix(data[,!indx])
categoricalVariables = c("cellType", "priorTherapy")
continiousVariables = c("karnofskyScore", "monthsFromDiagnosis", "age", "treatment")
newData = cbind(data.frame(lapply(data[, categoricalVariables], as.factor)),
data.frame(lapply(data[, continiousVariables], as.numeric)), time = as.numeric(data[,survivalTime]),
status = as.numeric(data[, statusVar]))
newData
categoricalVariables = c("cellType")
cbind(data.frame(lapply(data[, categoricalVariables], as.factor)))
categoricalVariables = c("cellType", "priorTherapy")
cbind(data.frame(lapply(data[, categoricalVariables], as.factor))
cbind(data.frame(lapply(data[, categoricalVariables], as.factor)))
categoricalVariables = c("cellType")
cbind(data.frame(lapply(data[, categoricalVariables], as.factor)))
cbind(data.frame(lapply(data[, categoricalVariables, drop = FALSE], as.factor)))
newData = cbind(data.frame(lapply(data[, categoricalVariables, drop = FALSE], as.factor))),
data.frame(lapply(data[, continiousVariables, drop = FALSE], as.numeric)), as.numeric(data[,survivalTime, drop = FALSE]),
as.numeric(data[, statusVar, drop = FALSE]))
newData = cbind(data.frame(lapply(data[, categoricalVariables, drop = FALSE], as.factor)),
data.frame(lapply(data[, continiousVariables, drop = FALSE], as.numeric)), as.numeric(data[,survivalTime, drop = FALSE]),
as.numeric(data[, statusVar, drop = FALSE]))
as.numeric(data[,survivalTime, drop = FALSE])
newData = cbind(data.frame(lapply(data[, categoricalVariables, drop = FALSE], as.factor)),
data.frame(lapply(data[, continiousVariables, drop = FALSE], as.numeric)), as.numeric(data[,survivalTime]),
as.numeric(data[, statusVar]))
head(newData)
names(newData)[c(ncol(newData)-1,ncol(newData))]
names(newData)[c(ncol(newData)-1,ncol(newData))] = c(survivalTime, statusVar)
head(newData)
predictors = paste(categoricalVariables,continiousVariables, sep = "+", collapse = "+")
formula = as.formula(paste(survivalTime, "~", predictors))
mm = model.matrix(formula, data = newData)
newData = cbind(newData[,c(survivalTime, statusVar)], mm)
indx = colnames(newData) %in% c(survivalTime, statusVar)
x = data.matrix(newData[,!indx])
y = Surv(newData[,survivalTime], newData[,statusVar])
fit <- cv.glmnet(x, y, family="cox", alpha=1)
coef(fit, s = fit$lambda.min)
